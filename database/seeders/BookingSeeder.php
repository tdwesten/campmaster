<?php

namespace Database\Seeders;

use App\Domain\Booking\Actions\CreateBookingAction;
use App\Domain\Booking\Actions\SelectBookingSiteAction;
use App\Models\Guest;
use App\Models\Site;
use App\Models\Tenant;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;

class BookingSeeder extends Seeder
{
    /**
     * Seed the bookings (reservations) table with demo data for each tenant using event-sourced actions.
     */
    public function run(): void
    {
        // For each tenant, set it as current and create bookings
        Tenant::all()->each(function (Tenant $tenant): void {
            $tenant->makeCurrent();

            // Collect available guests and sites for this tenant
            $guestIds = Guest::query()->where('tenant_id', $tenant->id)->pluck('id');
            $siteIds = Site::query()->where('tenant_id', $tenant->id)->pluck('id');

            // If none exist (edge case), ensure at least one guest/site via factories
            if ($guestIds->isEmpty()) {
                $guestIds = collect([
                    Guest::factory()->create(['tenant_id' => $tenant->id])->id,
                ]);
            }

            if ($siteIds->isEmpty()) {
                $site = Site::create([
                    'id' => Str::uuid()->toString(),
                    'tenant_id' => $tenant->id,
                    'name' => 'Site 1 - Standard',
                    'description' => 'Autogenerated site for seeding bookings.',
                ]);
                $siteIds = collect([$site->id]);
            }

            // Create a realistic number of bookings per tenant
            $count = 35; // default amount of demo reservations per tenant

            $createBooking = new CreateBookingAction;
            $selectSite = new SelectBookingSiteAction;

            for ($i = 0; $i < $count; $i++) {
                $guestId = (string) $guestIds->random();
                $siteId = (string) $siteIds->random();

                // Generate a random date range within the next 120 days
                $start = now()->addDays(random_int(0, 90))->format('Y-m-d');
                $end = now()->addDays(random_int(91, 120))->format('Y-m-d');

                // Ensure end is after start by at least 1 day
                if ($end <= $start) {
                    $end = now()->parse($start)->addDays(random_int(2, 14))->format('Y-m-d');
                }

                // Create booking via event-sourced action (tenant inferred from current tenant)
                $bookingUuid = $createBooking->execute(
                    guestUuid: $guestId,
                    startDate: $start,
                    endDate: $end,
                    notes: null,
                    tenantUuid: null,
                );

                // Select a site for the booking via event-sourced action
                $selectSite->execute($bookingUuid, $siteId);
            }
        });
    }
}
