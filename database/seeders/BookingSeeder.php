<?php

namespace Database\Seeders;

use App\Models\Booking;
use App\Models\Guest;
use App\Models\Site;
use App\Models\Tenant;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;

class BookingSeeder extends Seeder
{
    /**
     * Seed the bookings (reservations) table with demo data for each tenant.
     */
    public function run(): void
    {
        // For each tenant, set it as current and create bookings
        Tenant::all()->each(function (Tenant $tenant): void {
            $tenant->makeCurrent();

            // Collect available guests and sites for this tenant
            $guestIds = Guest::query()->where('tenant_id', $tenant->id)->pluck('id');
            $siteIds = Site::query()->where('tenant_id', $tenant->id)->pluck('id');

            // If none exist (edge case), ensure at least one guest/site via factories
            if ($guestIds->isEmpty()) {
                $guestIds = collect([
                    Guest::factory()->create(['tenant_id' => $tenant->id])->id,
                ]);
            }

            if ($siteIds->isEmpty()) {
                $site = Site::create([
                    'id' => Str::uuid()->toString(),
                    'tenant_id' => $tenant->id,
                    'name' => 'Site 1 - Standard',
                    'description' => 'Autogenerated site for seeding bookings.',
                ]);
                $siteIds = collect([$site->id]);
            }

            // Create a realistic number of bookings per tenant
            $count = 35; // default amount of demo reservations per tenant

            Booking::factory()
                ->count($count)
                ->state(function () use ($tenant, $guestIds, $siteIds): array {
                    return [
                        'tenant_id' => $tenant->id,
                        'guest_id' => $guestIds->random(),
                        'site_id' => $siteIds->random(),
                    ];
                })
                ->create();
        });
    }
}
